<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

<#
	Generate("ulong", 64, "UL");
	Generate("uint", 32, "U");
	Generate("ushort", 16, "");
	Generate("byte", 8, "");
#>

<#+
void Generate(string T, int bits, string literal)
{
#>
namespace BitLevelGeneration
{
    public static class BitVectors_<#=T#>
    {
        public static List<int> FromBitVector(this List<<#=T#>> n) 
        {
            var v = new List<int>(<#=bits#>);
            for (int i = 0; i < <#=bits#>; i++)
            {
                var b = (<#=T#>)(1<#=literal#> << i);
                int m = 0;
                for (int j = 0; j < n.Count; j++)
                {
                    if ((b & n[j]) != 0)
                        m += 1 << j;
                }

                v.Add(m);
            }

            return v;
        }

        public static List<<#=T#>> ToBitVector(IEnumerable<int> w)
        {
            var v = w.ToList();
            var n = new List<<#=T#>>();
            while (true)
            {
                <#=T#> m = 0;
                var zero = true;
                for (int i = 0; i < v.Count; i++)
                {
                    if (v[i] != 0)
                        zero = false;

                    if ((v[i] & 1) != 0)
                        m |= (<#=T#>)(1<#=literal#> << i);

                    v[i] >>= 1;
                }

                n.Add(m);

                if (zero)
                    break;
            }

            return n;
        }

        public static void Increment(this List<<#=T#>> n, <#=T#> m)
        {
            var i = 0;
            while (m != 0)
            {
                var t1 = (<#=T#>)(m & n[i]);
                var t2 = (<#=T#>)(m ^ n[i]);

                m = t1;
                n[i] = t2;

                i++;
            }
        }

        public static void Decrement(this List<<#=T#>> n, <#=T#> m)
        {
            var i = 0;
            while (m != 0)
            {
                var t1 = (<#=T#>)(m & ~n[i]);
                var t2 = (<#=T#>)(m ^ n[i]);

                m = t1;
                n[i] = t2;

                i++;
            }
        }

        public static <#=T#> Zeroes(this List<<#=T#>> n)
        {
            <#=T#> m = 0;
            for (int i = 0; i < n.Count; i++)
                m |= n[i];

            return (<#=T#>)~m;
        }

        public static <#=T#> GreaterThan(this List<<#=T#>> n, List<<#=T#>> k)
        {
            <#=T#> a = 0;
            <#=T#> b = 0;
            for (int i = Math.Max(n.Count, k.Count) - 1; i >= 0; i--)
            {
                if (i >= k.Count)
                    a |= n[i];
                else if (i >= n.Count)
                    b |= k[i];
                else
                {
                    a |= (<#=T#>)(~b & n[i] & ~k[i]);
                    b |= (<#=T#>)(~a & ~n[i] & k[i]);
                }
            }

            return (<#=T#>)(a & ~b);
        }
    }
}
<#+
}
#>
